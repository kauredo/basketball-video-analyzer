name: Build Basketball Video Analyzer

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      # Cache node_modules with OS-specific key
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Windows-specific setup
      - name: Windows setup
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.3
        with:
          msbuild-architecture: x64

      - name: Install Visual Studio Build Tools
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          echo "Installing Visual Studio Build Tools..."
          choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK" -y

      - name: Install Python
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        env:
          PYTHON:
            ${{ matrix.os == 'windows-latest' && format('{0}/python.exe',
            github.workspace) || '' }}
          GYP_MSVS_VERSION: "2019"
          npm_config_build_from_source: true
        run: |
          npm ci --omit=optional
          npm install -g electron-rebuild

      # Rebuild native modules for the target platform
      - name: Rebuild native modules
        run: npm run rebuild
        env:
          ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
          ELECTRON_BUILDER_CACHE:
            ${{ github.workspace }}/.cache/electron-builder

      # Debug FFmpeg installation
      - name: Debug FFmpeg
        run: |
          npm list ffmpeg-static
          node -e "console.log('FFmpeg path:', require('ffmpeg-static'))"

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run make -- --platform=darwin
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run make -- --platform=win32
        env:
          DEBUG: electron-forge:*

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: basketball-video-analyzer-mac
          path: |
            out/make/**/*.dmg
            out/make/**/*.zip
          retention-days: 30

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: basketball-video-analyzer-windows
          path: |
            out/make/**/*.exe
            out/make/**/*.nupkg
            out/make/**/*Setup.exe
          retention-days: 30

      # Upload logs on failure
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}
          path: |
            ${{ github.workspace }}/**/*-debug.log
            ${{ github.workspace }}/**/*-error.log
            ${{ runner.temp }}/**/*-debug.log
            ${{ runner.temp }}/**/*-error.log
            ${{ env.LOCALAPPDATA }}/npm-cache/_logs/*.log
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -la

      # Optional: Create a release if you want automatic releases
      # - name: Create Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       basketball-video-analyzer-mac/**/*
      #       basketball-video-analyzer-windows/**/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
